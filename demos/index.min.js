(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var defaults = {
	$elName: '$el',
	elSep: '__',
	modSep: '--',
	namespace: null
};

if (typeof $ == 'undefined') {
	if (typeof jQuery == 'undefined') {
		throw new Error('ya-del: jQuery is not defined');
	} else $ = jQuery;
}

/**
 * @typedef {String} dName
 *
 * Element document name.
 * This name is used as an identifier for element.
 */

module.exports = {
	/**
	 * Init del module
	 * @param  {Object} options
	 * @param  {String} [options.dName]
	 * @param  {String} [options.namespace] Namespace
	 * @param  {jQuery|DOMElement} [options.$el]
	 */
	initDel: function(options) {
		this.DelOptions = $.extend({}, defaults, this.DelOptions, options);
		this.dName = this.DelOptions.dName || this._name;
		this.selector = this.selector || '.' + this.dName;
		this.namespace = this.DelOptions.namespace || this.dName;
		this.initEl();
	},

	/**
	 * Define $el
	 */
	initEl: function() {
		if (this.$el) return;
		if (this.DelOptions.$el) {
			if (this.DelOptions.$el instanceof $)
				this.$el = this.DelOptions.$el;
			else this.$el = $(this.DelOptions.$el);
		} else this.$el = $('.' + this.dName);
	},

	makeName: function(elName, modName) {
		var name = this.dName;
		if (elName) {
			if (!Array.isArray(elName)) elName = [elName];
			name += this.DelOptions.elSep + elName.join(this.DelOptions.elSep);
		}
		if (modName) name += this.DelOptions.modSep + modName;
		return name;
	},

	/**
	 * Add property $dName to el classes
	 */
	setName: function() {
		this.$el.addClass(this.dName);
	},

	makeSelector: function() {
		return '.' + this.makeName.apply(this, arguments);
	},

	/**
	 * Find child element by a dName
	 * @param {String} dName dName
	 * @return {jQuery} Finded element
	 */
	find: function() {
		return this.$el.find(this.makeSelector.apply(this, arguments));
	},

	/**
	 * Find element in other el
	 * @param {jQuery|string|DOMElement} el el to find in
	 * @param {string|array} element name
	 * @return {jQuery}
	 */
	findIn: function(el) {
		return (el instanceof $ ? el : $(el)).find(this.makeSelector.apply(this, [].slice.call(arguments, 1)));
	},

	/**
	 * Make full el name by modifier
	 * @param  {string} name       modifier name
	 * @param  {bool} toSelector   to prepend selector mark on not
	 * @return {string}            full el name/selector
	 */
	modName: function(name, toSelector) {
		var selectorMark = toSelector ? '.' : '';
		return selectorMark + this.makeName('', name);
	},

	hasMod: function(name) {
		return this.$el.hasClass(this.modName(name));
	},

	addMod: function(name) {
		return this.$el.addClass(this.modName(name));
	},

	filterByMod: function(name) {
		return this.$el.filter('.' + this.modName(name));
	},

	removeMod: function(name) {
		this.$el.removeClass(this.modName(name));
	},

	toggleMod: function(name, state) {
		var args = arguments;
		args[0] = this.modName(args[0]);
		$.fn.toggleClass.apply(this.$el, args);
	},

	eventName: function(name) {
		return name + '.' + this.namespace;
	},

	/**
	 * jquery like 'on'. Attach event to this.$el or with delegation.
	 * 
	 * @example
	 * obj.on('click', 'elName', handler)
	 * obj.on('click', handler)
	 * 
	 * @param  {[type]} name [description]
	 * @return {[type]}      [description]
	 */
	on: function(name) {
		var args = arguments;
		args[0] = this.eventName(name);
		$.fn.on.apply(this.$el, args);
	},

	/**
	 * Opposite to #on
	 */
	off: function(name) {
		this.$el.off(this.eventName(name));
	},
	trigger: function(name) {
		this.$el.trigger(this.eventName(name));
	},

	createEl: function(name, tagName) {
		return $('<' + (tagName || 'div') + ' />', {
			'class': this.makeName(name)
		});
	}
};
},{}],2:[function(require,module,exports){
'use strict';
var Del = require('ya-del');
require('./tabbable-selector');

function App () {
	this.$savedFocus = undefined;

	this.lastFocused = undefined;
}

App._name = 'yapopup';
App.defaults = {
	// If append to body
	bodyAppend: true,

	// Close button html
	close: '<button>x</button>',

	dName: 'b-popup'
};

App.KEY_CODES = {
	ESC: 27,
	TAB: 9,
	SHIFT: 65
};

App.make = function(options) {
	var inst = new this;
	inst.options = options;
	return inst;
};

App.init = function(options) {
	var inst = this.make(options);
	if (inst) inst.init();
	return inst;
};

App.prototype = $.extend({}, Del, {
	constructor: App,
	init: function() {
		this.setOptions();
		this.setEl();
		this.name = this.constructor._name;
		this.defineId();
		this.initDel({dName: this.options.dName});
		this.defineEls();
		this.defineEvents();
		this.setAria();
	},

	setOptions: function() {
		this.options = $.extend(true, {}, this.constructor.defaults, this.options);
	},

	setEl: function() {
		if (!this.options.$el || this.options.$el.length !== 1)
			throw new Error('$el options must be defined and exist in DOM');
		this.$el = this.options.$el;
	},

	defineId: function() {
		this.id = this.$el.attr('id');
		if (!this.id) throw new Error('There is no id in popup el');
	},

	defineEls: function() {
		this.$content = this.find('content');
		this.defineTrigger();
		this.defineClose();
	},

	defineTrigger: function() {
		this.$trigger = $('[data-yapopup-target=' + this.id + ']');
	},

	defineClose: function() {
		this.$close = this.find('close');
		if (!this.$close.length) {
			this.$close = $(this.options.close)
				.addClass(this.makeName('close'))
				.appendTo(this.$content);
		}
	},

	defineEvents: function() {
		var self = this;
		this.$el.on('keyup.' + this.name, function(e) {
			self.checkEsc(e);
		});
		this.$trigger.on('click.' + this.name, function(e) {
			e.preventDefault();
			self.open();
		});
		this.$close.on('click', function(e) {
			e.preventDefault();
			self.close();
		});
		this.$el.on('focusout', function(e) {
			self.onFocusOut(e);
		});
		this.$el.on('focusin', function(e) {
			self.onFocusIn(e);
		});
	},

	setAria: function() {
		this.$el.attr('role', 'dialog');
	},

	open: function() {
		this.saveFocus();
		this.show();
		this.ariaShow();
		this.focusIn();
	},

	close: function() {
		this.hide();
		this.restorefocus();
		this.ariaHide();
	},

	ariaShow: function() {
		this.$el.attr('aria-hidden', false);
	},

	ariaHide: function() {
		this.$el.attr('aria-hidden', true);
	},

	show: function() {
		this.addMod('show');
	},

	hide: function() {
		this.removeMod('show');
	},

	focusIn: function() {
		this.$el.find(':tabbable').first().focus();
	},

	saveFocus: function() {
		this.$savedFocus = $(':focus');
	},

	restorefocus: function() {
		this.$savedFocus.focus();
	},

	checkEsc: function(e) {
		if (e.keyCode == this.constructor.KEY_CODES.ESC)
			this.close();
	},

	onFocusIn: function(e) {
		this.lastFocused = e.target;
	},

	onFocusOut: function() {
		var $tabbable = this.$el.find(':tabbable');
		if (this.lastFocused) {
			var $lastTabbable = $tabbable.last();
			if ($lastTabbable[0] === this.lastFocused) {
				$tabbable.first().focus();
			} else $lastTabbable.focus();
		} else {
			$tabbable.last().focus();
		}
	}
});

module.exports = App;
},{"./tabbable-selector":4,"ya-del":1}],3:[function(require,module,exports){
var Yapopup = require('./app');

(function($) {
	if ($.Yapopup || $.fn.yapopup) {
		console.warn('Yapopup or another plugin with similar name has been already setted');
	}
	$.Yapopup = Yapopup;
	$.fn.yapopup = function(options) {
		return this.each(function(index) {
			options = $.extend({}, options);
			options.index = index;
			options.$el = $(this);
			$.Yapopup.init(options);
		});
	};
})(jQuery);

window.l = function(x) {
	console.log(x);
};
},{"./app":2}],4:[function(require,module,exports){
$.extend($.expr[ ':' ], {
	focusable: function(element){
		return focusable(element, !isNaN($.attr(element, 'tabindex')));
	},

	tabbable: function(element){
		var tabIndex = $.attr(element, 'tabindex'),
			isTabIndexNaN = isNaN(tabIndex);
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable(element, !isTabIndexNaN);
	}
});

/**
 * focussable function, taken from jQuery UI Core
 * @param element
 * @returns {*}
 */
function focusable(element){
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase(),
		isTabIndexNotNaN = !isNaN($.attr(element, 'tabindex'));
	if('area' === nodeName){
		map = element.parentNode;
		mapName = map.name;
		if(!element.href || !mapName || map.nodeName.toLowerCase() !== 'map'){
			return false;
		}
		img = $('img[usemap=#' + mapName + ']')[0];
		return !!img && visible(img);
	}
	return ( /^(input|select|textarea|button|object)$/.test(nodeName) ?
		!element.disabled :
		'a' === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible(element);

	function visible(element){
		return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function(){
			return $.css(this, 'visibility') === 'hidden';
		}).length;
	}
}
},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
